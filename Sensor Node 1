#include <WiFi.h>
#include <PubSubClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <LiquidCrystal_I2C.h>
#include <math.h>

// === Broches ESP32 ===
#define ONE_WIRE_BUS 4
#define NTC_PIN 34
#define SDA_PIN 21
#define SCL_PIN 22

// === Réseau Wi-Fi ===
const char* ssid = "Wokwi-GUEST";
const char* password = "";

// === Serveur MQTT ===
const char* mqtt_server = "test.mosquitto.org";
WiFiClient espClient;
PubSubClient client(espClient);

// === Capteurs ===
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
Adafruit_MPU6050 mpu;
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Fonction pour (re)connecter au WiFi si besoin
void checkWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi déconnecté, tentative de reconnexion...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    int retries = 0;
    while (WiFi.status() != WL_CONNECTED && retries < 20) {
      delay(500);
      Serial.print(".");
      retries++;
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nWiFi reconnecté !");
    } else {
      Serial.println("\nÉchec reconnexion WiFi");
    }
  }
}

// Fonction pour (re)connecter au broker MQTT si besoin
void reconnect() {
  while (!client.connected()) {
    Serial.print("Connexion au broker MQTT...");
    if (client.connect("ESP32ClientNode1")) {
      Serial.println("Réussi");
    } else {
      Serial.print("Échec. Code = ");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void setup() {
  Serial.begin(115200);

  // Initialisation I2C
  Wire.begin(SDA_PIN, SCL_PIN);

  // Initialisation capteurs et écran
  sensors.begin();

  if (!mpu.begin()) {
    Serial.println("Erreur MPU6050");
    while (1);
  }

  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Systeme Pret...");

  // Connexion Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connexion WiFi à ");
  Serial.println(ssid);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnecté au WiFi, IP : " + WiFi.localIP().toString());

  // Configuration serveur MQTT
  client.setServer(mqtt_server, 1883);
}

void loop() {
  checkWiFi();

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Lecture température DS18B20
  sensors.requestTemperatures();
  float tempCorp = sensors.getTempCByIndex(0);

  // Lecture NTC
  int adc = analogRead(NTC_PIN);
  float voltage = adc * (3.3 / 4095.0);
  float resistance = (3.3 - voltage) * 10000 / voltage;
  float tempAmb = 1 / (0.001129148 + 0.000234125 * log(resistance) +
                       0.0000000876741 * pow(log(resistance), 3)) - 273.15;

  // Lecture MPU6050
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // Affichage sur LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.printf("Corp: %.1f C", tempCorp);
  lcd.setCursor(0, 1);
  lcd.printf("Amb:  %.1f C", tempAmb);

  // Construction du payload MQTT
  String payload = "{";
  payload += "\"tempCorp\":" + String(tempCorp, 2) + ",";
  payload += "\"tempAmb\":" + String(tempAmb, 2) + ",";
  payload += "\"accX\":" + String(a.acceleration.x, 2) + ",";
  payload += "\"accY\":" + String(a.acceleration.y, 2) + ",";
  payload += "\"accZ\":" + String(a.acceleration.z, 2);
  payload += "}";

  // Publication MQTT
  client.publish("sante/capteurs/utilisateur1", payload.c_str());
  Serial.println("MQTT envoyé : " + payload);

  delay(2000);
}
